// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: common.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// uuid
struct ProtoIdentifier {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var low: UInt64 = 0

  var high: UInt64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct ProtoLog {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var scope: [ProtoIdentifier] = []

  var token: String = String()

  var position: UInt64 = 0

  var level: ProtoLog.Level = .unknown

  var timestampMillis: UInt64 = 0

  var label: String = String()

  var message: String = String()

  /// file:line function
  var codeReference: String = String()

  var meta: Dictionary<String,String> = [:]

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum Level: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case unknown // = 0
    case verbose // = 1
    case debug // = 2
    case info // = 3
    case warning // = 4
    case error // = 5
    case critical // = 6
    case UNRECOGNIZED(Int)

    init() {
      self = .unknown
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unknown
      case 1: self = .verbose
      case 2: self = .debug
      case 3: self = .info
      case 4: self = .warning
      case 5: self = .error
      case 6: self = .critical
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .unknown: return 0
      case .verbose: return 1
      case .debug: return 2
      case .info: return 3
      case .warning: return 4
      case .error: return 5
      case .critical: return 6
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  init() {}
}

#if swift(>=4.2)

extension ProtoLog.Level: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [ProtoLog.Level] = [
    .unknown,
    .verbose,
    .debug,
    .info,
    .warning,
    .error,
    .critical,
  ]
}

#endif  // swift(>=4.2)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension ProtoIdentifier: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "Identifier"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "low"),
    2: .same(proto: "high"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.low) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self.high) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.low != 0 {
      try visitor.visitSingularUInt64Field(value: self.low, fieldNumber: 1)
    }
    if self.high != 0 {
      try visitor.visitSingularUInt64Field(value: self.high, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtoIdentifier, rhs: ProtoIdentifier) -> Bool {
    if lhs.low != rhs.low {return false}
    if lhs.high != rhs.high {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtoLog: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "Log"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "scope"),
    2: .same(proto: "token"),
    3: .same(proto: "position"),
    4: .same(proto: "level"),
    5: .same(proto: "timestampMillis"),
    6: .same(proto: "label"),
    7: .same(proto: "message"),
    8: .same(proto: "codeReference"),
    9: .same(proto: "meta"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.scope) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.token) }()
      case 3: try { try decoder.decodeSingularUInt64Field(value: &self.position) }()
      case 4: try { try decoder.decodeSingularEnumField(value: &self.level) }()
      case 5: try { try decoder.decodeSingularUInt64Field(value: &self.timestampMillis) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.label) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.message) }()
      case 8: try { try decoder.decodeSingularStringField(value: &self.codeReference) }()
      case 9: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: &self.meta) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.scope.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.scope, fieldNumber: 1)
    }
    if !self.token.isEmpty {
      try visitor.visitSingularStringField(value: self.token, fieldNumber: 2)
    }
    if self.position != 0 {
      try visitor.visitSingularUInt64Field(value: self.position, fieldNumber: 3)
    }
    if self.level != .unknown {
      try visitor.visitSingularEnumField(value: self.level, fieldNumber: 4)
    }
    if self.timestampMillis != 0 {
      try visitor.visitSingularUInt64Field(value: self.timestampMillis, fieldNumber: 5)
    }
    if !self.label.isEmpty {
      try visitor.visitSingularStringField(value: self.label, fieldNumber: 6)
    }
    if !self.message.isEmpty {
      try visitor.visitSingularStringField(value: self.message, fieldNumber: 7)
    }
    if !self.codeReference.isEmpty {
      try visitor.visitSingularStringField(value: self.codeReference, fieldNumber: 8)
    }
    if !self.meta.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: self.meta, fieldNumber: 9)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtoLog, rhs: ProtoLog) -> Bool {
    if lhs.scope != rhs.scope {return false}
    if lhs.token != rhs.token {return false}
    if lhs.position != rhs.position {return false}
    if lhs.level != rhs.level {return false}
    if lhs.timestampMillis != rhs.timestampMillis {return false}
    if lhs.label != rhs.label {return false}
    if lhs.message != rhs.message {return false}
    if lhs.codeReference != rhs.codeReference {return false}
    if lhs.meta != rhs.meta {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtoLog.Level: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNKNOWN"),
    1: .same(proto: "VERBOSE"),
    2: .same(proto: "DEBUG"),
    3: .same(proto: "INFO"),
    4: .same(proto: "WARNING"),
    5: .same(proto: "ERROR"),
    6: .same(proto: "CRITICAL"),
  ]
}
