// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: RobologsTest/Robologs/Remote/Transports/ProtoHttpRemoteLoggerTransport/proto/backend.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct TestLogMessage {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var timestampMs: Int64 = 0

  var priority: TestLogMessage.Priority = .debug

  var flow: String = String()

  var source: String = String()

  var label: String = String()

  var message: String = String()

  var meta: Dictionary<String,String> = [:]

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum Priority: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case debug // = 0
    case info // = 1
    case warn // = 2
    case error // = 3
    case UNRECOGNIZED(Int)

    init() {
      self = .debug
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .debug
      case 1: self = .info
      case 2: self = .warn
      case 3: self = .error
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .debug: return 0
      case .info: return 1
      case .warn: return 2
      case .error: return 3
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  init() {}
}

#if swift(>=4.2)

extension TestLogMessage.Priority: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [TestLogMessage.Priority] = [
    .debug,
    .info,
    .warn,
    .error,
  ]
}

#endif  // swift(>=4.2)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension TestLogMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "TestLogMessage"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "timestamp_ms"),
    2: .same(proto: "priority"),
    3: .same(proto: "flow"),
    4: .same(proto: "source"),
    5: .same(proto: "label"),
    6: .same(proto: "message"),
    7: .same(proto: "meta"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt64Field(value: &self.timestampMs)
      case 2: try decoder.decodeSingularEnumField(value: &self.priority)
      case 3: try decoder.decodeSingularStringField(value: &self.flow)
      case 4: try decoder.decodeSingularStringField(value: &self.source)
      case 5: try decoder.decodeSingularStringField(value: &self.label)
      case 6: try decoder.decodeSingularStringField(value: &self.message)
      case 7: try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: &self.meta)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.timestampMs != 0 {
      try visitor.visitSingularInt64Field(value: self.timestampMs, fieldNumber: 1)
    }
    if self.priority != .debug {
      try visitor.visitSingularEnumField(value: self.priority, fieldNumber: 2)
    }
    if !self.flow.isEmpty {
      try visitor.visitSingularStringField(value: self.flow, fieldNumber: 3)
    }
    if !self.source.isEmpty {
      try visitor.visitSingularStringField(value: self.source, fieldNumber: 4)
    }
    if !self.label.isEmpty {
      try visitor.visitSingularStringField(value: self.label, fieldNumber: 5)
    }
    if !self.message.isEmpty {
      try visitor.visitSingularStringField(value: self.message, fieldNumber: 6)
    }
    if !self.meta.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: self.meta, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TestLogMessage, rhs: TestLogMessage) -> Bool {
    if lhs.timestampMs != rhs.timestampMs {return false}
    if lhs.priority != rhs.priority {return false}
    if lhs.flow != rhs.flow {return false}
    if lhs.source != rhs.source {return false}
    if lhs.label != rhs.label {return false}
    if lhs.message != rhs.message {return false}
    if lhs.meta != rhs.meta {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TestLogMessage.Priority: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "DEBUG"),
    1: .same(proto: "INFO"),
    2: .same(proto: "WARN"),
    3: .same(proto: "ERROR"),
  ]
}
