// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: backend.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct JournalTokenRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var secret: String {
    get {return _secret ?? String()}
    set {_secret = newValue}
  }
  /// Returns true if `secret` has been explicitly set.
  var hasSecret: Bool {return self._secret != nil}
  /// Clears the value of `secret`. Subsequent reads from it will return its default value.
  mutating func clearSecret() {self._secret = nil}

  var sender: JournalTokenRequest.Sender {
    get {return _sender ?? JournalTokenRequest.Sender()}
    set {_sender = newValue}
  }
  /// Returns true if `sender` has been explicitly set.
  var hasSender: Bool {return self._sender != nil}
  /// Clears the value of `sender`. Subsequent reads from it will return its default value.
  mutating func clearSender() {self._sender = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  struct Sender {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var id: String {
      get {return _id ?? String()}
      set {_id = newValue}
    }
    /// Returns true if `id` has been explicitly set.
    var hasID: Bool {return self._id != nil}
    /// Clears the value of `id`. Subsequent reads from it will return its default value.
    mutating func clearID() {self._id = nil}

    var appID: String {
      get {return _appID ?? String()}
      set {_appID = newValue}
    }
    /// Returns true if `appID` has been explicitly set.
    var hasAppID: Bool {return self._appID != nil}
    /// Clears the value of `appID`. Subsequent reads from it will return its default value.
    mutating func clearAppID() {self._appID = nil}

    var appName: String {
      get {return _appName ?? String()}
      set {_appName = newValue}
    }
    /// Returns true if `appName` has been explicitly set.
    var hasAppName: Bool {return self._appName != nil}
    /// Clears the value of `appName`. Subsequent reads from it will return its default value.
    mutating func clearAppName() {self._appName = nil}

    var appVersion: String {
      get {return _appVersion ?? String()}
      set {_appVersion = newValue}
    }
    /// Returns true if `appVersion` has been explicitly set.
    var hasAppVersion: Bool {return self._appVersion != nil}
    /// Clears the value of `appVersion`. Subsequent reads from it will return its default value.
    mutating func clearAppVersion() {self._appVersion = nil}

    var appBuildVersion: String {
      get {return _appBuildVersion ?? String()}
      set {_appBuildVersion = newValue}
    }
    /// Returns true if `appBuildVersion` has been explicitly set.
    var hasAppBuildVersion: Bool {return self._appBuildVersion != nil}
    /// Clears the value of `appBuildVersion`. Subsequent reads from it will return its default value.
    mutating func clearAppBuildVersion() {self._appBuildVersion = nil}

    var operationSystem: String {
      get {return _operationSystem ?? String()}
      set {_operationSystem = newValue}
    }
    /// Returns true if `operationSystem` has been explicitly set.
    var hasOperationSystem: Bool {return self._operationSystem != nil}
    /// Clears the value of `operationSystem`. Subsequent reads from it will return its default value.
    mutating func clearOperationSystem() {self._operationSystem = nil}

    var operationSystemVersion: String {
      get {return _operationSystemVersion ?? String()}
      set {_operationSystemVersion = newValue}
    }
    /// Returns true if `operationSystemVersion` has been explicitly set.
    var hasOperationSystemVersion: Bool {return self._operationSystemVersion != nil}
    /// Clears the value of `operationSystemVersion`. Subsequent reads from it will return its default value.
    mutating func clearOperationSystemVersion() {self._operationSystemVersion = nil}

    var deviceModel: String {
      get {return _deviceModel ?? String()}
      set {_deviceModel = newValue}
    }
    /// Returns true if `deviceModel` has been explicitly set.
    var hasDeviceModel: Bool {return self._deviceModel != nil}
    /// Clears the value of `deviceModel`. Subsequent reads from it will return its default value.
    mutating func clearDeviceModel() {self._deviceModel = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _id: String? = nil
    fileprivate var _appID: String? = nil
    fileprivate var _appName: String? = nil
    fileprivate var _appVersion: String? = nil
    fileprivate var _appBuildVersion: String? = nil
    fileprivate var _operationSystem: String? = nil
    fileprivate var _operationSystemVersion: String? = nil
    fileprivate var _deviceModel: String? = nil
  }

  init() {}

  fileprivate var _secret: String? = nil
  fileprivate var _sender: JournalTokenRequest.Sender? = nil
}

struct JournalTokenResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var journalToken: String {
    get {return _journalToken ?? String()}
    set {_journalToken = newValue}
  }
  /// Returns true if `journalToken` has been explicitly set.
  var hasJournalToken: Bool {return self._journalToken != nil}
  /// Clears the value of `journalToken`. Subsequent reads from it will return its default value.
  mutating func clearJournalToken() {self._journalToken = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _journalToken: String? = nil
}

struct LogMessageBatch {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var messages: [LogMessage] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct LogMessage {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var timestampMs: Int64 {
    get {return _timestampMs ?? 0}
    set {_timestampMs = newValue}
  }
  /// Returns true if `timestampMs` has been explicitly set.
  var hasTimestampMs: Bool {return self._timestampMs != nil}
  /// Clears the value of `timestampMs`. Subsequent reads from it will return its default value.
  mutating func clearTimestampMs() {self._timestampMs = nil}

  var priority: LogMessage.Priority {
    get {return _priority ?? .debug}
    set {_priority = newValue}
  }
  /// Returns true if `priority` has been explicitly set.
  var hasPriority: Bool {return self._priority != nil}
  /// Clears the value of `priority`. Subsequent reads from it will return its default value.
  mutating func clearPriority() {self._priority = nil}

  var flow: String {
    get {return _flow ?? String()}
    set {_flow = newValue}
  }
  /// Returns true if `flow` has been explicitly set.
  var hasFlow: Bool {return self._flow != nil}
  /// Clears the value of `flow`. Subsequent reads from it will return its default value.
  mutating func clearFlow() {self._flow = nil}

  var source: String {
    get {return _source ?? String()}
    set {_source = newValue}
  }
  /// Returns true if `source` has been explicitly set.
  var hasSource: Bool {return self._source != nil}
  /// Clears the value of `source`. Subsequent reads from it will return its default value.
  mutating func clearSource() {self._source = nil}

  var label: String {
    get {return _label ?? String()}
    set {_label = newValue}
  }
  /// Returns true if `label` has been explicitly set.
  var hasLabel: Bool {return self._label != nil}
  /// Clears the value of `label`. Subsequent reads from it will return its default value.
  mutating func clearLabel() {self._label = nil}

  var message: String {
    get {return _message ?? String()}
    set {_message = newValue}
  }
  /// Returns true if `message` has been explicitly set.
  var hasMessage: Bool {return self._message != nil}
  /// Clears the value of `message`. Subsequent reads from it will return its default value.
  mutating func clearMessage() {self._message = nil}

  var meta: Dictionary<String,String> = [:]

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum Priority: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case debug // = 0
    case info // = 1
    case warn // = 2
    case error // = 3

    init() {
      self = .debug
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .debug
      case 1: self = .info
      case 2: self = .warn
      case 3: self = .error
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .debug: return 0
      case .info: return 1
      case .warn: return 2
      case .error: return 3
      }
    }

  }

  init() {}

  fileprivate var _timestampMs: Int64? = nil
  fileprivate var _priority: LogMessage.Priority? = nil
  fileprivate var _flow: String? = nil
  fileprivate var _source: String? = nil
  fileprivate var _label: String? = nil
  fileprivate var _message: String? = nil
}

#if swift(>=4.2)

extension LogMessage.Priority: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension JournalTokenRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "JournalTokenRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "secret"),
    2: .same(proto: "sender"),
  ]

  public var isInitialized: Bool {
    if self._secret == nil {return false}
    if self._sender == nil {return false}
    if let v = self._sender, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self._secret)
      case 2: try decoder.decodeSingularMessageField(value: &self._sender)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._secret {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    }
    if let v = self._sender {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: JournalTokenRequest, rhs: JournalTokenRequest) -> Bool {
    if lhs._secret != rhs._secret {return false}
    if lhs._sender != rhs._sender {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension JournalTokenRequest.Sender: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = JournalTokenRequest.protoMessageName + ".Sender"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .standard(proto: "app_id"),
    3: .standard(proto: "app_name"),
    4: .standard(proto: "app_version"),
    5: .standard(proto: "app_build_version"),
    6: .standard(proto: "operation_system"),
    7: .standard(proto: "operation_system_version"),
    8: .standard(proto: "device_model"),
  ]

  public var isInitialized: Bool {
    if self._id == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self._id)
      case 2: try decoder.decodeSingularStringField(value: &self._appID)
      case 3: try decoder.decodeSingularStringField(value: &self._appName)
      case 4: try decoder.decodeSingularStringField(value: &self._appVersion)
      case 5: try decoder.decodeSingularStringField(value: &self._appBuildVersion)
      case 6: try decoder.decodeSingularStringField(value: &self._operationSystem)
      case 7: try decoder.decodeSingularStringField(value: &self._operationSystemVersion)
      case 8: try decoder.decodeSingularStringField(value: &self._deviceModel)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._id {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    }
    if let v = self._appID {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    }
    if let v = self._appName {
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    }
    if let v = self._appVersion {
      try visitor.visitSingularStringField(value: v, fieldNumber: 4)
    }
    if let v = self._appBuildVersion {
      try visitor.visitSingularStringField(value: v, fieldNumber: 5)
    }
    if let v = self._operationSystem {
      try visitor.visitSingularStringField(value: v, fieldNumber: 6)
    }
    if let v = self._operationSystemVersion {
      try visitor.visitSingularStringField(value: v, fieldNumber: 7)
    }
    if let v = self._deviceModel {
      try visitor.visitSingularStringField(value: v, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: JournalTokenRequest.Sender, rhs: JournalTokenRequest.Sender) -> Bool {
    if lhs._id != rhs._id {return false}
    if lhs._appID != rhs._appID {return false}
    if lhs._appName != rhs._appName {return false}
    if lhs._appVersion != rhs._appVersion {return false}
    if lhs._appBuildVersion != rhs._appBuildVersion {return false}
    if lhs._operationSystem != rhs._operationSystem {return false}
    if lhs._operationSystemVersion != rhs._operationSystemVersion {return false}
    if lhs._deviceModel != rhs._deviceModel {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension JournalTokenResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "JournalTokenResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "journal_token"),
  ]

  public var isInitialized: Bool {
    if self._journalToken == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self._journalToken)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._journalToken {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: JournalTokenResponse, rhs: JournalTokenResponse) -> Bool {
    if lhs._journalToken != rhs._journalToken {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension LogMessageBatch: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "LogMessageBatch"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "messages"),
  ]

  public var isInitialized: Bool {
    if !SwiftProtobuf.Internal.areAllInitialized(self.messages) {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.messages)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.messages.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.messages, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: LogMessageBatch, rhs: LogMessageBatch) -> Bool {
    if lhs.messages != rhs.messages {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension LogMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "LogMessage"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "timestamp_ms"),
    2: .same(proto: "priority"),
    3: .same(proto: "flow"),
    4: .same(proto: "source"),
    5: .same(proto: "label"),
    6: .same(proto: "message"),
    7: .same(proto: "meta"),
  ]

  public var isInitialized: Bool {
    if self._timestampMs == nil {return false}
    if self._priority == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt64Field(value: &self._timestampMs)
      case 2: try decoder.decodeSingularEnumField(value: &self._priority)
      case 3: try decoder.decodeSingularStringField(value: &self._flow)
      case 4: try decoder.decodeSingularStringField(value: &self._source)
      case 5: try decoder.decodeSingularStringField(value: &self._label)
      case 6: try decoder.decodeSingularStringField(value: &self._message)
      case 7: try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: &self.meta)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._timestampMs {
      try visitor.visitSingularInt64Field(value: v, fieldNumber: 1)
    }
    if let v = self._priority {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 2)
    }
    if let v = self._flow {
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    }
    if let v = self._source {
      try visitor.visitSingularStringField(value: v, fieldNumber: 4)
    }
    if let v = self._label {
      try visitor.visitSingularStringField(value: v, fieldNumber: 5)
    }
    if let v = self._message {
      try visitor.visitSingularStringField(value: v, fieldNumber: 6)
    }
    if !self.meta.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: self.meta, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: LogMessage, rhs: LogMessage) -> Bool {
    if lhs._timestampMs != rhs._timestampMs {return false}
    if lhs._priority != rhs._priority {return false}
    if lhs._flow != rhs._flow {return false}
    if lhs._source != rhs._source {return false}
    if lhs._label != rhs._label {return false}
    if lhs._message != rhs._message {return false}
    if lhs.meta != rhs.meta {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension LogMessage.Priority: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "DEBUG"),
    1: .same(proto: "INFO"),
    2: .same(proto: "WARN"),
    3: .same(proto: "ERROR"),
  ]
}
